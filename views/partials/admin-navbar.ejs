<nav class="navbar navbar-expand-lg navbar-dark" style="background-color: #6F4E37;">
    <div class="container">
        <a class="navbar-brand" href="/admin" onclick="return checkAdminAuth()">Admin Panel</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#adminNavbar">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="adminNavbar">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/admin" onclick="return checkAdminAuth()">Dashboard</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/admin/orders" onclick="return checkAdminAuth()">Orders</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/admin/products" onclick="return checkAdminAuth()">Products</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/admin/users" onclick="return checkAdminAuth()">Users</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/store-ordering" onclick="return checkAdminAuth()">Store Ordering</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/admin/banned-accounts" onclick="return checkAdminAuth()">Banned Accounts</a>
                </li>
            </ul>
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="/" onclick="logout()">Logout</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<script>
async function checkAdminAuth() {
    const token = localStorage.getItem('token');
    const user = JSON.parse(localStorage.getItem('user') || 'null');
    
    if (!token || !user) {
        Swal.fire({
            icon: 'error',
            title: 'Access Denied',
            text: 'Please log in to access this page'
        }).then(() => {
            window.location.href = '/login';
        });
        return false;
    }

    if (user.role !== 'admin') {
        Swal.fire({
            icon: 'error',
            title: 'Access Denied',
            text: 'You must be an admin to access this page'
        });
        return false;
    }

    // Verify token with server
    try {
        const response = await fetch('http://localhost:5000/api/users/verify', {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            throw new Error('Invalid token');
        }

        // Add token to all subsequent requests
        const originalFetch = window.fetch;
        window.fetch = function(url, options = {}) {
            if (!options.headers) {
                options.headers = {};
            }
            options.headers['Authorization'] = `Bearer ${token}`;
            return originalFetch(url, options);
        };

        return true;
    } catch (error) {
        console.error('Auth verification failed:', error);
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        Swal.fire({
            icon: 'error',
            title: 'Session Expired',
            text: 'Please log in again'
        }).then(() => {
            window.location.href = '/login';
        });
        return false;
    }
}

function logout() {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    window.location.href = '/login';
}
</script> 