<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/hatem.css">
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Montserrat:wght@400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <title>Shopping Cart - Coffee House</title>
    <style>
        /* ... existing styles ... */
        
        .button-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 20px;
            margin-top: 30px;
        }

        .cart-button {
            background-color: saddlebrown;
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 15px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }

        .cart-button:hover {
            background-color: brown;
        }

        /* Edit Mode Header Indicator */
        .edit-mode-indicator {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background-color: #6F4E37;
            color: white;
            text-align: center;
            padding: 10px;
            z-index: 1000;
            font-weight: 500;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .edit-mode-indicator i {
            margin-right: 8px;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        /* Adjust main content when indicator is visible */
        body.edit-mode-active {
            padding-top: 50px;
        }

        body.edit-mode-active .main-content {
            margin-top: 50px;
        }
    </style>
</head>
<body>
    <!-- Edit Mode Indicator -->
    <div class="edit-mode-indicator" id="editModeIndicator">
        <i class="fas fa-edit"></i> Edit Mode Active - Order #<span id="editOrderNumber"></span>
    </div>

    <header class="navbar">
        <div class="logo">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-cup-hot-fill" viewBox="0 0 16 16">
                <path d="M.5 6a.5.5 0 0 0-.488.608l1.652 7.434A2.5 2.5 0 0 0 4.104 16h5.792a2.5 2.5 0 0 0 2.44-1.958l.131-.59a3 3 0 0 0 1.3-5.854l.221-.99A.5.5 0 0 0 13.5 6H.5z"/>
                <path d="M4.4.8a.5.5 0 0 1 .488.09.6.6 0 0 1 .037.103l.362 1.566a1.5 1.5 0 0 0 1.011 1.11l1.853.456c.325.081.539.27.616.477l.5 1.5a.5.5 0 0 1-.84.477l-.5-.5-1.414 1.414.5.5a.5.5 0 0 1-.707.707l-1.414-1.414-.5.5a.5.5 0 1 1-.707-.707l.5-.5-1.414-1.414-.5.5a.5.5 0 1 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0z"/>
            </svg>
            <h1>Coffee House</h1>
        </div>
        <nav class="nav-buttons">
            <button onclick="window.location.href='/'">home</button>
        </nav>
    </header> 

    <main class="main-content">
        <form id="cart-form">
            <h2>Your Cart</h2>
            <table id="cart-table">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Item</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="cart-items">
                    <!-- Cart items will be dynamically added here -->
                </tbody>
                <tfoot>
                    <tr class="empty-cart">
                        <td colspan="6">Your cart is empty</td>
                    </tr>
                    <tr>
                        <td colspan="4" style="text-align: right;">Subtotal:</td>
                        <td colspan="2" id="subtotal">LE 0.00</td>
                    </tr>
                    <tr class="discount-row" style="display: none;">
                        <td colspan="4" style="text-align: right;">Discount:</td>
                        <td colspan="2" id="discount">LE 0.00</td>
                    </tr>
                    <tr class="total-row">
                        <td colspan="4" style="text-align: right;">Total:</td>
                        <td colspan="2" id="grand-total">LE 0.00</td>
                    </tr>
                </tfoot>
            </table>

            <div class="promo-container">
                <input type="text" id="promo-code" placeholder="Enter promo code">
                <button type="button" id="apply-promo">Apply</button>
                <span id="promo-message" class="promo-message"></span>
            </div>

            <div class="special-instructions">
                <textarea id="special-instructions" placeholder="Special instructions for your order"></textarea>
            </div>

            <div class="button-container">
                <button type="button" class="cart-button" id="continue-btn">Continue Shopping</button>
                <button type="button" class="cart-button" id="checkout-btn">Proceed to Checkout</button>
                <button type="button" class="cart-button" id="update-btn" style="display: none;">Update Order</button>
            </div>
        </form>
    </main>

    <script>
        const API_BASE_URL = 'http://localhost:3000/api';

        async function checkAuth() {
            const token = localStorage.getItem('token');
            const user = JSON.parse(localStorage.getItem('user') || 'null');
            
            if (!token || !user) {
                Swal.fire({
                    icon: 'error',
                    title: 'Access Denied',
                    text: 'Please log in to access this page'
                }).then(() => {
                    window.location.href = '/login';
                });
                return false;
            }

            try {
                const response = await fetch(`${API_BASE_URL}/users/verify`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    throw new Error('Invalid token');
                }

                return true;
            } catch (error) {
                console.error('Auth verification failed:', error);
                localStorage.removeItem('token');
                localStorage.removeItem('user');
                Swal.fire({
                    icon: 'error',
                    title: 'Session Expired',
                    text: 'Please log in again'
                }).then(() => {
                    window.location.href = '/login';
                });
                return false;
            }
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', async () => {
            if (!await checkAuth()) return;
            
            // Load cart
            try {
                const response = await fetch(`${API_BASE_URL}/cart`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to fetch cart');
                }

                const cart = await response.json();
                // Handle cart display logic here
            } catch (error) {
                console.error('Error loading cart:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to load cart'
                });
            }
        });

        // Handle continue shopping button
        document.getElementById('continue-btn').addEventListener('click', () => {
            window.location.href = '/menu';
        });

        // Handle checkout button
        document.getElementById('checkout-btn').addEventListener('click', async () => {
            const specialInstructions = document.getElementById('special-instructions').value.trim();
            localStorage.setItem('specialInstructions', specialInstructions);
            window.location.href = '/checkout';
        });

        // Handle update button
        document.getElementById('update-btn').addEventListener('click', async () => {
            const specialInstructions = document.getElementById('special-instructions').value.trim();
            const orderEditId = localStorage.getItem('orderEditId');
            
            if (!orderEditId) {
                Swal.fire({
                    title: 'Error',
                    text: 'No order selected for editing',
                    icon: 'error'
                });
                return;
            }

            try {
                const cartData = await window.Cart.getCart();
                if (!cartData || !cartData.items || cartData.items.length === 0) {
                    throw new Error('Cart is empty');
                }

                const response = await fetch(`/api/orders/${orderEditId}/items`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify({
                        items: cartData.items,
                        specialInstructions
                    })
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.message || 'Failed to update order');
                }

                // Clear edit mode
                localStorage.removeItem('orderEditId');
                localStorage.removeItem('orderEditTimeLeft');

                // Show success message and redirect back to order confirmation
                Swal.fire({
                    title: 'Order Updated',
                    text: 'Your order has been updated successfully',
                    icon: 'success',
                    confirmButtonColor: '#6F4E37'
                }).then(() => {
                    window.location.href = `/order-confirmation/${orderEditId}`;
                });
            } catch (error) {
                console.error('Error updating order:', error);
                Swal.fire({
                    title: 'Error',
                    text: error.message || 'Failed to update order. Please try again.',
                    icon: 'error'
                });
            }
        });

        // Handle promo code application
        document.getElementById('apply-promo').addEventListener('click', async () => {
            const promoCode = document.getElementById('promo-code').value.trim();
            if (!promoCode) {
                Swal.fire({
                    title: 'Error',
                    text: 'Please enter a promo code',
                    icon: 'error'
                });
                return;
            }

            try {
                await window.Cart.applyPromoCode(promoCode);
                Swal.fire({
                    title: 'Success',
                    text: 'Promo code applied successfully',
                    icon: 'success',
                    timer: 1500,
                    showConfirmButton: false
                });
            } catch (error) {
                Swal.fire({
                    title: 'Error',
                    text: error.message || 'Failed to apply promo code',
                    icon: 'error'
                });
            }
        });

        // Add this to your existing JavaScript
        document.addEventListener('DOMContentLoaded', function() {
            const editModeIndicator = document.getElementById('editModeIndicator');
            const editOrderNumber = document.getElementById('editOrderNumber');
            const orderEditId = localStorage.getItem('orderEditId');
            const fromOrderConfirmation = localStorage.getItem('fromOrderConfirmation');
            const orderStartTime = localStorage.getItem('orderEditStartTime');
            
            // Check if we're in edit mode from order confirmation
            if (orderEditId && fromOrderConfirmation === 'true') {
                // Check if we're within the 1-minute window
                const timeElapsed = Date.now() - parseInt(orderStartTime);
                if (timeElapsed <= 60000) {
                    // Show the indicator
                    editModeIndicator.style.display = 'block';
                    document.body.classList.add('edit-mode-active');
                    
                    // Set the order number
                    editOrderNumber.textContent = orderEditId;
                } else {
                    // Clear edit mode if time has expired
                    localStorage.removeItem('orderEditId');
                    localStorage.removeItem('fromOrderConfirmation');
                    localStorage.removeItem('orderEditTimeLeft');
                    localStorage.removeItem('orderEditStartTime');
                    localStorage.removeItem('editModeTimeCheck');
                    
                    // Redirect back to order confirmation
                    window.location.href = '/order-confirmation/' + orderEditId;
                }
            } else {
                // Clear any leftover edit mode data
                localStorage.removeItem('orderEditId');
                localStorage.removeItem('fromOrderConfirmation');
                localStorage.removeItem('orderEditTimeLeft');
                localStorage.removeItem('orderEditStartTime');
                localStorage.removeItem('editModeTimeCheck');
            }
        });
    </script>

    <footer>
        <!-- ... existing footer content ... -->
    </footer>

    <script src="/js/hatem.js"></script>
</body>
</html>
